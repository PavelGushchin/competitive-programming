// Задача: E, Вердикт: OK, Время: 5ms, Память: 976.00Kb
#include <bits/stdc++.h>
using namespace std;
main() {
    // читаем число в виде строки "n" и считаем его остаток от деления на 7:
    // для вычисления остатка применяем схему Горнера, например:
    // a * 1000 + b * 100 + c * 10 + d = ((a * 10 + b) * 10 + c) * 10 + d
    string n;
    cin >> n;
    const int numDigits = (int)n.size();
    int remainder = 0;
    for (int i = 0; i < numDigits; i++) {
        int digit = n[i] - '0';
        remainder = (remainder * 10 + digit) % 7;
    }
    // теперь пытаемся увеличить и уменьшить каждую цифру, пересчитывая остаток
    // от деления на 7 по формулам. Если получился нулевой остаток, то увеличиваем ответ
    int powerOf10 = 1, answer = 0;
    for (int i = numDigits - 1; i >= 0; i--)
    {
        // powerOf10 - отстаток от деления на 7 для степени десятки,
        // соответствующей текущему разряду. Разряды нумеруются справа-налево
        // если мы увеличим текущую цифру, то остаток увеличится на powerOf10
        // аналогично для уменьшения текущей цифры
        
        // пытаемся увеличить текущую цифру. нельзя увеличивать девятки
        if (n[i] != '9') {
            int newRemainder = (remainder + powerOf10) % 7;
            if (newRemainder == 0)
                answer++;
        }
        // пытаемся уменьшить текущую цифру. нельзя уменьшать нолики и лидирующую единицу
        if (n[i] != '0' && !(n[i] == '1' && i == 0)) {
            int newRemainder = (remainder - powerOf10 + 7) % 7;
            if (newRemainder == 0)
                answer++;
        }
        // обновляем степень десятки для следующего разряда:
        powerOf10 = (powerOf10 * 10) % 7;
    }
    // выводим ответ:
    cout << answer << endl;
}
