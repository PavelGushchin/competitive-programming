// Задача: C, Вердикт: OK, Время: 0.005 сек, Память: 2 МБ

// Идея решения: сумма цифр в числе очень быстро убывает и становится однозначной
// от 1 до 9 при многократном применении. Сумма цифр в n из отрезка [1, 10^{12}]
// до 9 * 12 - худший случай. Поэтому переберём сумму цифр. Далее посчитаем хвост
// от повторного применения суммы от суммы цифр, и т.д. Вычтем посчитанные слагаемые
// из числа n. Таким образом, мы вычислим искомое число x. Проверим его сумму цифр:
// равна ли она тому значению, которое мы зафиксировали.

#include <bits/stdc++.h>
#define int int64_t
using namespace std;

// функция считает сумму цифр в числе:
int sumDigits(int x) {
    return (x <= 9) ? x : ((x % 10) + sumDigits(x / 10));
}

vector<int> solve(int n, int k) {
    // если k == 0, то уравнение состоит из одного слагаемого и решение однозначно:
    if (k == 0)
        return {n};
    // иначе переберём сумму цифр в числе x. Она будет от 1 до 9 * 12
    vector<int> answ;
    for (int sumX = 1; sumX <= 9 * 12; sumX++) {
        // посчитаем остальные слагаемые: S(S(x)), S(S(S(x))), и т.д.
        // сумма суммы цифр очень быстро превращается в одно число
        int lastTerm = sumX;
        int x = n - sumX;
        for (int i = 2; i <= k; i++) {
            int currTerm = sumDigits(lastTerm);
            if (currTerm == lastTerm) {
                // сумма цифр вырожденная, можем посчитать по формуле
                // все остальные слагаемые от i до k:
                x -= (k - i + 1) * lastTerm;
                break;
            }
            // иначе делаем ещё одну итерацию:
            x -= currTerm;
            lastTerm = currTerm;
        }
        // итак, мы обработали все слагаемые с суммами цифр и знаем x. Мы его
        // вычислили в процессе обработки как:
        // x = n - S(x) - S(S(x)) - ...
        // проверим, что сумма цифр в числе x равна тому значению, которое мы
        // зафиксировали, и тогда мы нашли ещё одно решение
        if (x >= 1 && sumDigits(x) == sumX)
            answ.push_back(x);
    }
    return answ;
}

void solve() {
    int n, k; cin >> n >> k;
    auto answ = solve(n, k);
    sort(answ.begin(), answ.end());
    cout << answ.size() << '\n';
    for (auto it : answ)
        cout << it << ' ';
    cout << '\n';
}

main() {
    int tt; cin >> tt;
    while (tt --> 0)
        solve();
}
