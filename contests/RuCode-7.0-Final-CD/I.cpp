/*
    Идея:
    1. Предподсчитаем все ответы: переберём все простые до 1000000 и для каждого
       подмножества цифр обновим минимальный ответ им
    2. Используем предподсчитанные ответы для решения задачи
*/
#include <bits/stdc++.h>
#define isz(x) (int)(x).size()
#define all(x) (x).begin(),(x).end()
using namespace std;
using vi = vector<int>;

int getbit(auto x, int i) {
// возвращает i-й бит числа
    return int(x >> i & 1);
}
template<typename T>
void setbit(T &x, int i, int val) {
// устанавливает i-й бит в значение val
    x &= ~(T(1) << i);
    x |= T(val) << i;
}

const int NMAX = (int)1e6;

const auto pr = [](){
// предподсчёт простых решетом Эратосфена:
    vector<bool> isPrime(NMAX+1, true);
    isPrime[0] = isPrime[1] = false;
    for (int x = 2; x * x <= NMAX; x++)
        if (isPrime[x])
            for (int y = x * x; y <= NMAX; y += x)
                isPrime[y] = false;
    vi primes;
    for (int x = 2; x <= NMAX; x++)
        if (isPrime[x])
            primes.push_back(x);
    return primes;
}();

void precalc() {
// предподсчёт всех ответов на каждое из подмножеств цифр:
    vi answ(1 << 10, INT_MAX);
    for (int i = 0; i < isz(pr); i++) {
        vi digits;
        int x = pr[i];
        do {
            digits.push_back(x % 10);
            x /= 10;
        } while (x > 0);
        std::sort(all(digits));
        for (int mask = 0; mask < (1 << 10); mask++) {
            if (answ[mask] < INT_MAX) continue;
            // проверяем что нет ни одной забаненной цифры:
            bool ok = 1;
            for (int bit = 0; bit < 10; bit++)
                if (getbit(mask,bit))
                    ok &= !std::binary_search(all(digits), bit);
            // если всё нормально, то обновляем ответ:
            if (ok) answ[mask] = pr[i];
        }
    }
    std::cout << "{";
    for (int i = 0; i < isz(answ); i++) {
        if (i > 0) std::cout << ",";
        std::cout << answ[i];
    }
    std::cout << "};";
    std::exit(0);
}

int main()
{
    // предподсчитываем ответы для каждого множества цифр:
    // precalc();
    // используем предподсчитанные ответы для ответа на текущий запрос:
    vi answ{2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,11,11,89,89,2,2,2,2,3,3,3,3,2,2,2,2,11,11,89,89,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,11,11,89,89,2,2,2,2,3,3,3,3,2,2,2,2,11,11,89,89,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,11,11,409,449,2,2,2,2,3,3,3,3,2,2,2,2,11,11,2147483647,2147483647,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,11,11,409,449,2,2,2,2,3,3,3,3,2,2,2,2,11,11,2147483647,2147483647,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,11,11,2147483647,2147483647,2,2,2,2,3,3,3,3,2,2,2,2,11,11,2147483647,2147483647,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,11,11,2147483647,2147483647,2,2,2,2,3,3,3,3,2,2,2,2,11,11,2147483647,2147483647,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,7,7,7,7,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,11,11,2147483647,2147483647,2,2,2,2,3,3,3,3,2,2,2,2,11,11,2147483647,2147483647,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,5,5,5,5,2,2,2,2,3,3,3,3,2,2,2,2,11,11,2147483647,2147483647,2,2,2,2,3,3,3,3,2,2,2,2,11,11,2147483647,2147483647};
    for (int k; std::cin >> k; ) {
        int mask = 0;
        for (int i = 0; i < k; i++) {
            int bit; std::cin >> bit;
            setbit(mask,bit,1);
        }
        int res = answ[mask];
        if (res == INT_MAX) res = -1;
        std::cout << res << std::endl;
    }
}
