/*
    Решение: приводим к ступенчатому виду методом Гаусса верхних (n-1) строк матрицы
    Работаем сразу с остатками от деления на 2 (чётные: остаток 0, нечётные: остаток 1)
    Теперь, если после приведения есть хотя бы одна нулевая строка, то определитель будет равен 0 всегда
    В таких случаях ответ 0
    
    Теперь у нас ступенчатый вид, типо, например, такого:
    1****
    001**
    0001*
    00001
    В столбцах, где у нас единицы на ступеньках, не важно, какой элемент мы выберем - мы можем их уничтожить за счёт
    этой единицы путём вычитания строки из последней. Поэтому для таких столбцов 2 варианта.
    Останется столбец в котором нет ступеньки. Для него мы должны поставить единицу.
    Итого 2^(n-1) вариантов всегда, если ранг матрицы равен (n-1)
*/

#include <bits/stdc++.h>
using namespace std;
const int mod = (int)1e9+7;
using bs = bitset<2048>;
int main() {
    int tt; cin >> tt;
    while (tt --> 0)
    {
        // читаем данные и создаём матрицу. Будем работать с битсетами в качестве строк
        int n; cin >> n;
        vector<bs> a(n-1);
        for (int r = 0; r < n - 1; r++) {
            for (int c = 0; c < n; c++) {
                char ch; cin >> ch;
                a[r][c] = (ch-'0');
            }
        }
        // считаем ранг матрицы
        int rank = 0;
        for (int c = 0; c < n; c++) {
            // ищем строку в которой нет нуля в текущем столбце:
            {
                int r = rank;
                while (r < n-1 && a[r][c] == 0) r++;
                if (r == n-1) continue;   // не нашли
                std::swap(a[rank], a[r]); // нашли - свапаем
            }
            // вычитаем нашу найденную строку из тех под ней, где стоит единица:
            for (int r = rank+1; r < n - 1; r++)
                if (a[r][c])
                    a[r] ^= a[rank]; // вычитание/сложение по модулю 2 это ксор
            // увеличиваем ранг
            rank++;
        }
        if (rank < n - 1) cout << "0\n";
        else
        {
            // считаем степень двойки и выводим её:
            int answ = 1;
            for (int i = 0; i < n - 1; i++)
                answ = answ * 2LL % mod;
            cout << answ << '\n';
        }
    }
    return 0;
}