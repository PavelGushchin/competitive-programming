#include <bits/stdc++.h>
#define isz(x) (int)(x).size()
using namespace std;
const int mod = (int)1e9+7;
int main() {
    // читаем данные
    string s, t; cin >> s >> t;
    // добавим фиктивные символы, чтобы использовать 1-индексацию
    s = '$' + s;
    t = '?' + t;
    // считаем динамику
    vector dp(isz(s), vector(isz(t), 0));
    // dp[i][j] = сколько пар равных таких, что:
    //  подстрока оканчивается в i-м символе строки s,
    //  подпоследовательность оканчивается в <= j символе строки t
    int answ = 0;
    for (int i = 1; i < isz(s); i++) {
        for (int j = 1; j < isz(t); j++) {
            if (s[i] == t[j]) { // если символы равны, то сумма трёх вариантов:
                // 1. подстрока длины 1: s[i..i] == t[j..j]
                // 2. подстрока длины x>1: равный последний символ, плюс
                //                         длины (x-1) что было до него (dp[i-1][j-1])
                // 3. подпоследовательность оканчивается в <= j-1 (не используем равенство s[i] == t[j]
                dp[i][j] = (1 + dp[i-1][j-1] + dp[i][j-1]) % mod;
            } else {
                // здесь символы не равны, поэтому два варианта (1) и (2) пропадают:
                dp[i][j] = dp[i][j-1];
            }
        }
        // обновляем ответ: прибавляем dp[i][m]
        (answ += dp[i].back()) %= mod;
    }
    cout << answ << endl;
}
